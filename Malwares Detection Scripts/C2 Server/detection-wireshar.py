import subprocess
from openai import OpenAI
import time
import os

import subprocess

def capture_traffic(duration=60, interface='eth0', pcap_file='/tmp/capture_file.pcap'):
    """Capture network traffic using tshark and return a summarized report of the traffic."""
    print("Capturing network traffic...")
    # Capture the traffic
    subprocess.run(
        f"sudo tshark -i {interface} -a duration:{duration} -w {pcap_file}",
        shell=True, check=True
    )

    # Generate a summary report from the captured traffic
    print("Generating traffic report...")
    report_command = f"sudo tshark -r {pcap_file} -q -z endpoints,ip -z conv,tcp"
    report_process = subprocess.run(
        report_command,
        shell=True, capture_output=True, text=True, check=True
    )
    report = report_process.stdout

    return pcap_file, report


def extract_traffic_info(pcap_file):
	"""Extract relevant traffic information from pcap file."""
	print("Analyzing captured traffic...")
	top_ips_ports = subprocess.run(
	f"sudo tshark -r {pcap_file} -T fields -e ip.dst -e tcp.dstport -Y tcp -c 1000 | sort | uniq -c | sort -nr | head -1",
	shell=True, capture_output=True, text=True
	).stdout.strip()

	file_transfers = subprocess.run(
	f"sudo tshark -r {pcap_file} -Y 'ftp-data or http.file_data' -T fields -e text",
	shell=True, capture_output=True, text=True
	).stdout.strip()

	return top_ips_ports, file_transfers
    
def send_analysis_request(top_ips_ports, file_transfers, traffic):
	"""Send extracted data to OpenAI's ChatGPT for analysis."""
	messages = []
	client = OpenAI(
		api_key = os.getenv("OPENAI_API_KEY")
	)
	prompt_text = f"""
Given the following detailed network traffic data, please analyze for any indicators of malicious activities or potential security threats. Focus specifically on:

1. Identifying the most frequently used IP addresses and ports from the data. Highlight any unusual or repetitive communication patterns that might suggest the presence of a Command and Control (C2) server.

2. Examining the content of any files transferred over the network. Look for any scripts, executables, or any data that could be used to execute unauthorized actions, establish external connections, or deploy malware.

3. Assessing if any part of the file transfers contains recognizable patterns or signatures of malware, such as known malicious payloads, unusual encryption, or obfuscation techniques.

4. Providing detailed information on any suspicious IP addresses, ports, and specific filenames involved in these transfers that could potentially be part of a malicious activity.

### Network Traffic Data
- Top IP and Port Combinations: {top_ips_ports}
- Sample Traffic Log: {traffic}

### File Transfer Contents
- Extracted File Content: {file_transfers}

Based on the analysis, indicate which IP address, port, and file names are the most suspicious and could potentially be linked to malicious activities. Provide specific details and recommendations for further investigation or action, and give the IP and port  that the malicious file came from and analyse the content of the file and give me a summary of that.
"""

	messages.append({"role":"user", "content":prompt_text})
	response = client.chat.completions.create(
		model = "gpt-3.5-turbo",
		messages = messages
	)
	
	responses = response.choices[0].message.content
	
	messages.append({"role":"assistant", "content":responses})
	return responses

	


interface = 'enp0s3'
duration = 10  # Capture duration in seconds
while True:
	pcap_file, report = capture_traffic(duration, interface)
	top_ips_ports, file_transfers = extract_traffic_info(pcap_file)
	analysis_results = send_analysis_request(top_ips_ports, file_transfers, report)
	print("ChatGPT Analysis Results:\n", analysis_results)
	print("\nWaiting for the next capture cycle...")
	time.sleep(duration)  # Wait for the next capture cycle

    

    


