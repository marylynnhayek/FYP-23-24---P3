"""
this script uses wireshark and specifically tshark where it takes a report of the frames on the network from
wireshark and sends it to chatgpt to analyze it to find any suspicious connection
"""

import subprocess
import os
import tkinter as tk
from openai import OpenAI


folder_name = "wireshark"
detailed_file_name = "wireshark_detailed_summary.txt"
file_path = os.path.join(folder_name, detailed_file_name)


output_file_name = "wireshark_report_with_protocols.txt"
output_file_path = os.path.join(folder_name, output_file_name)


capture_duration = 5


interface_index = 4


tshark_path = "C:\\Program Files\\Wireshark\\tshark.exe"


fields = [
    "frame.number",
    "ip.src",
    "ip.dst",
    "ip.proto",
    "dns.qry.name"
]


command = [
    tshark_path,
    "-i", str(interface_index),
    "-a", f"duration:{capture_duration}",
    "-T", "fields",
    *[item for field in fields for item in ["-e", field]],
    "-E", "header=y",
]


try:
    os.makedirs(folder_name, exist_ok=True)
    result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    unique_packets = set()


    output_lines = result.stdout.splitlines()
    header = output_lines[0]
    data_lines = output_lines[1:]


    for line in data_lines:
        unique_packets.add(line)


    with open(file_path, "w") as file:
        file.write(header + "\n")
        for line in sorted(unique_packets):
            file.write(line + "\n")

    if result.stderr:
        print("Error occurred:", result.stderr)
    else:
        print(f"Detailed summary saved to: {file_path}")
except Exception as e:
    print(f"Failed to execute tshark command: {e}")


protocol_map = {
    "6": "TCP",
    "17": "UDP"
}


try:
    with open(file_path, "r") as file, open(output_file_path, "w") as output_file:
        header = file.readline().strip()
        output_file.write(header + "\tpacket_type\n")

        for line in file:
            line_data = line.strip().split("\t")
            proto_num = line_data[3]
            packet_type = protocol_map.get(proto_num, "Other")


            output_file.write("\t".join(line_data) + "\t" + packet_type + "\n")

    print(f"Processed report saved to: {output_file_path}")
except Exception as e:
    print(f"Failed to process report: {e}")


def analyze_report(filename):
    """Analyzes the interests based on keystrokes in a file."""


    client = OpenAI(api_key="...") #chatgpt api key

    try:

        with open(filename, 'r') as file:
            content = file.read()


        if content:

            question = f"This is a Wireshark report: {content}\nAnalyze it to find any suspicious behavior."


            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are a helpful assistant."},
                    {"role": "user", "content": question},
                ]
            )


            answer = response.choices[0].message.content
            return answer
        else:
            return "The file is empty or the content is not readable."
    except FileNotFoundError:
        return "The specified file does not exist."

def display_analysis_result(filename):
    analysis_result = analyze_report(filename)
    text_widget.delete(1.0, tk.END)
    text_widget.insert(tk.END, analysis_result)


window = tk.Tk()
window.title("Wireshark Report Analyzer")
window.geometry("600x400")


text_widget = tk.Text(window, wrap=tk.WORD, height=20, width=80)
text_widget.pack(pady=20)


display_analysis_result("wireshark/wireshark_report_with_protocols.txt")


window.mainloop()
