"""this script listens to running processes to detect connections with
ai and send the process detils to chatgpt so it can analyze it
"""

import psutil
import time
import socket
import os
import tkinter as tk
from openai import OpenAI


def get_openai_ips():
    """Resolve domain names to IP addresses."""
    domains = ["openai.com", "api.openai.com"]
    ip_addresses = []
    for domain in domains:
        try:
            ips = socket.gethostbyname_ex(domain)[2]
            ip_addresses.extend(ips)
        except socket.gaierror:
            continue
    return ip_addresses


def get_process_info(pid):
    """Get process name and command line by PID."""
    try:
        process = psutil.Process(pid)
        name = process.name()
        cmdline = process.cmdline()
        return name, ' '.join(cmdline)
    except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
        return "Unknown", ""


def check_openai_communication(openai_ips, detected_connections, log_file):
    """Check for network connections to OpenAI's IPs."""
    connections = psutil.net_connections(kind='inet')

    for conn in connections:
        if conn.status == 'ESTABLISHED' and conn.raddr:
            if conn.raddr[0] in openai_ips and (conn.pid, conn.raddr[0]) not in detected_connections:
                name, cmdline = get_process_info(conn.pid)
                log_file.write(
                    f"Suspicious connection to OpenAI IP {conn.raddr[0]} from PID {conn.pid}, Name={name}, Command Line={cmdline}\n")
                detected_connections.add((conn.pid, conn.raddr[0]))


def scan_for_suspicious_processes(detected_processes, log_file):


    for process in psutil.process_iter(['pid', 'name', 'connections', 'exe', 'cmdline']):
        try:
            if 'python' in process.info['name'].lower():
                cmdline = process.info['cmdline']
                if cmdline:
                    if any('keyboard' in cmd.lower() for cmd in cmdline):
                        if process.info['pid'] not in detected_processes:
                            log_file.write(
                                f"Suspicious Python process detected: PID={process.info['pid']}, Name={process.info['name']}, Command Line={cmdline}\n")
                            detected_processes.add(process.info['pid'])
                if not process.info['exe'] and process.info['pid'] not in detected_processes:
                    log_file.write(
                        f"Suspicious hidden process detected: PID={process.info['pid']}, Name={process.info['name']}\n")
                    detected_processes.add(process.info['pid'])
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue


def main():

    output_dir = 'running_processes'
    output_file_path = os.path.join(output_dir, 'processes.txt')

    if os.path.exists(output_dir):

        if os.path.exists(output_file_path):
            try:
                os.remove(output_file_path)
            except Exception as e:
                print(f"Error deleting file {output_file_path}: {e}")
    else:
        os.makedirs(output_dir)

    openai_ips = get_openai_ips()
    detected_connections = set()
    detected_processes = set()
    start_time = time.time()
    duration = 120

    with open(output_file_path, 'a') as log_file:
        while time.time() - start_time < duration:
            check_openai_communication(openai_ips, detected_connections, log_file)
            scan_for_suspicious_processes(detected_processes, log_file)
            log_file.flush()
            time.sleep(3)


def analyze_report(filename):
    """Analyzes the interests based on keystrokes in a file."""


    client = OpenAI(api_key="...") #chatgpt api key

    try:

        with open(filename, 'r') as file:
            content = file.read()


        if content:

            question = f"These are the details of running processes: {content}\nCould any of these processes be malicious or serve a malicious connection?"


            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are a helpful assistant."},
                    {"role": "user", "content": question},
                ]
            )


            answer = response.choices[0].message.content
            return answer
        else:
            return "The file is empty or the content is not readable."
    except FileNotFoundError:
        return "The specified file does not exist."


def display_analysis_result(filename):
    analysis_result = analyze_report(filename)
    text_widget.delete(1.0, tk.END)
    text_widget.insert(tk.END, analysis_result)



window = tk.Tk()
window.title("Process Analysis Result")
window.geometry("600x400")


text_widget = tk.Text(window, wrap=tk.WORD, height=20, width=80)
text_widget.pack(pady=20)


main()
display_analysis_result("running_processes/processes.txt")


window.mainloop()
