"""
this script reads running py scripts on the system and sends the script to chatgpt so that it can detect
if there's a security breach / uses ai
results will be displayed it tkinter window as a table
"""

import os
import tkinter as tk
from tkinter import ttk
from openai import OpenAI
import psutil
import os
import sys

def find_python_scripts():

    self_path = os.path.realpath(__file__)
    scripts = set()
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if proc.info['cmdline'] and 'python' in proc.info['cmdline'][0]:
                script_path = proc.info['cmdline'][1]
                full_script_path = os.path.realpath(script_path)
                if os.path.isfile(full_script_path) and full_script_path != self_path:
                    scripts.add(full_script_path)
        except (psutil.NoSuchProcess, IndexError):
            continue
    return list(scripts)

def is_binary(file_path):



    try:
        with open(file_path, 'rb') as file:
            chunk = file.read(1024)
            if b'\0' in chunk:
                return True
        return False
    except Exception:
        return True

def copy_source_to_separate_files(scripts, directory="running_scripts"):


    os.makedirs(directory, exist_ok=True)
    file_count = 1
    for script in scripts:
        filename = os.path.join(directory, f'running{file_count}.txt')
        if is_binary(script):
            continue
        try:
            with open(script, 'r', encoding='utf-8') as src:
                with open(filename, 'w', encoding='utf-8') as file:
                    file.write(f'--- Source of {script} ---\n')
                    file.write(src.read())
                    file.write('\n\n')
            print(f"Source code of {script} has been copied to {filename}.")
            file_count += 1
        except UnicodeDecodeError:
            print(f"Failed to decode {script}, possibly due to encoding issues.")


running_scripts = find_python_scripts()


if running_scripts:
    copy_source_to_separate_files(running_scripts)
else:
    print("No running Python scripts found.")


client = OpenAI(api_key="...") #chatgpy api key

def analyze_scripts(filename):
    try:
        with open(filename, 'r') as file:
            first_line = file.readline().strip()
            script_content = file.read()

        if script_content:
            question = f"Analyze this script and explain if it interacts with artificial intelligence, what it does, and tell me if there is a potential for it to be malware, spyware, or virus. Just say: -potential security breach: yes/no, uses AI: yes/no:\n\n{script_content}"
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are a helpful assistant."},
                    {"role": "user", "content": question},
                ]
            )
            return first_line, response.choices[0].message.content
        else:
            return first_line, "The file is empty or the content is not readable."
    except FileNotFoundError:
        return None, f"The file {filename} was not found."

def display_results():
    folder_path = 'running_scripts'
    root = tk.Tk()
    root.title("Analysis Results")

    tree = ttk.Treeview(root, columns=("Script Path", "Analysis Result"), show="headings")
    vsb = ttk.Scrollbar(root, orient="vertical", command=tree.yview)
    hsb = ttk.Scrollbar(root, orient="horizontal", command=tree.xview)
    tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
    tree.heading("Script Path", text="Script Path")
    tree.heading("Analysis Result", text="Analysis Result")
    tree.column("Script Path", width=200, anchor='w')
    tree.column("Analysis Result", width=500, anchor='w')

    tree.grid(column=0, row=0, sticky='nsew')
    vsb.grid(column=1, row=0, sticky='ns')
    hsb.grid(column=0, row=1, sticky='ew')

    root.grid_columnconfigure(0, weight=1)
    root.grid_rowconfigure(0, weight=1)

    for file in os.listdir(folder_path):
        if file.endswith(".txt"):
            full_path = os.path.join(folder_path, file)
            first_line, result = analyze_scripts(full_path)
            if first_line is not None:
                tree.insert("", tk.END, values=(first_line, result))
            else:
                tree.insert("", tk.END, values=(file, result))

    root.mainloop()

display_results()
