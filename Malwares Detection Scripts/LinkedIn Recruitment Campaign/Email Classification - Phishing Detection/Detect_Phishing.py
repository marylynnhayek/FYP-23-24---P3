import string
import numpy as np
import pandas as pd
import nltk
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

nltk.download('stopwords')

def preprocess_text(text):
    stemmer = PorterStemmer()
    stopwords_set = set(stopwords.words('english'))
    text = text.lower().translate(str.maketrans('', '', string.punctuation)).split()
    text = [stemmer.stem(word) for word in text if word not in stopwords_set]
    return ' '.join(text)

def train_classifier(df):
    vectorizer = CountVectorizer()
    corpus = df['text'].apply(preprocess_text)
    x = vectorizer.fit_transform(corpus).toarray()
    y = df['label_num']
    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)
    clf = RandomForestClassifier(n_jobs=-1)
    clf.fit(x_train, y_train)
    return clf, vectorizer, x_test, y_test

def predict_label(clf, vectorizer, email):
    email_text = preprocess_text(email)
    email_corpus = [email_text]
    x_email = vectorizer.transform(email_corpus)
    prediction = clf.predict(x_email)[0]
    return prediction

def main():
    df = pd.read_csv('spam_ham_dataset.csv')
    df['text'] = df['text'].apply(lambda x: x.replace('\r\n', ' '))
    clf, vectorizer, x_test, y_test = train_classifier(df)
    accuracy = clf.score(x_test, y_test)
    print("Accuracy:", accuracy)
    example_email = df.text.values[10]
    prediction = predict_label(clf, vectorizer, example_email) # Fixed the argument here
    print("Predicted label:", prediction)
    print("Actual label:", df.label_num.iloc[10])

if __name__ == "__main__":
    main()
