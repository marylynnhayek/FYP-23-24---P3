import os
from openai import OpenAI
from bs4 import BeautifulSoup
import requests
from urllib.request import Request, urlopen

# To send the Email generated bu ChatGPT:
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Change the key: better place in .env file!!
client = OpenAI(api_key= "xxxxxxxxxxxxxxx")

# Step #1: Scrape user info: In our case its the profile: name, skills and email if present
def collect_applicant_info():
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
 
    site = 'https://au.linkedin.com/in/marylynnelhayek'
 
    req = Request(site,headers=headers)
    page = urlopen(req)
 
    soup = BeautifulSoup(page, 'lxml')
    name = soup.find('h1', class_='top-card-layout__title font-sans text-lg papabear:text-xl font-bold leading-open text-color-text mb-0')
    # print(name)
    if name:
        name = name.text.strip()
        print("Name:", name)
    else:
        print("Name not found")
        return None, None
    # projects = soup.find_all('p', class_='show-more-less-text__text--less')
    l=[]
    projects = soup.find_all('p', class_='show-more-less-text__text--less')
    #for j in projects:
       # print(j.text)
 
    if projects:
        for j in projects:
            print("Projects:", j.text)
            l.append(j.text)
    else:
        print("Projects not found")
        return None, None
    projects=";".join(l)
    return name, projects

# Step #2: Pass the collected info to the LLM for message generation
def generate_recruitment_message(name, projects):
    prompt = f"Dear {name},\n\nI am reaching out to express my interest in your profile. Based on the projects listed on your LinkedIn page, such as:\n\n"
    prompt += "\n".join([f"- {project}" for project in projects])
    prompt += "\n\nI believe your skills and experience would be a great fit for our team. Let's discuss further how we can collaborate.\n\nSincerely,\n[Your Name]"
    prompt += "\n\nSincerely,\nProxone Recruitment Team"

    messages = [
        {"role": "system", "content": "You are a recruiter: "},
    ]

    prompt = f"Can you please act as a talent recruiter at a reputable company and generate a recruitment Email based on the following projects {projects} and can you please also dedicate it to {name} ? And please remove [Your Name] from the Email footer and replace [Your Title] by Proxone Recruitment Team and replace [Company Name] by Proxone! Remember to make it as believable and respectful as possible!"

    response = client.chat.completions.create(
        messages=[
        {
            "role": "user",
            "content": prompt ,
        }
        ],\
        model="gpt-3.5-turbo",
    )
        
    reply =  response.choices[0].prompt.content
    print(f"ChatGPT: {reply}")
    messages.append({"role": "assistant", "content": reply})

    reply_with_link = reply + "\n\nPlease Fill out The Following Form To Apply For The Job: ."
    return reply_with_link


# Step #3: Send the generated message to the applicant either through Linkedin API or the smtp server:
def send_recruitment_message(reply):
    # Method #1: Through his Email if it's provided from his profile:
    # Sender
    sender = "hayekmarylynn@gmail.com" # Do not make it hard coded!!!!!
    # Recepient
    receiver = "marylynnhayek@gmail.com" # Change this value to take the output from the web scraper if the session cookies were retrieved.

    smtp_server = "smtp.gmail.com"
    smtp_port = 587  # For starttls
    password = "mdck wnwn wmna irka"

    # Create a secure SSL context
    message = MIMEMultipart()
    message["From"] = sender
    message["To"] = receiver
    message["Subject"] = "Recruitment At Proxone"
    message.attach(MIMEText(body, "plain"))

    try:
        # Connect to the SMTP server and send the email
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()  # Upgrade the connection to secure
        server.login(sender_email, password)
        server.sendmail(sender, receiver, message.as_string())
        server.quit()
        print("Email sent successfully!")
    except Exception as e:
        print(f"Failed to send email: {e}")

if __name__ == "__main__":

    # Step #1:
    name, projects = collect_applicant_info() # Scrape user linkedin profile

    if name and projects:
        email_content = generate_recruitment_message(name, projects)
        # print(f"Generated Email Content:Â {email_content}")

    else:
        print("Failed to collect applicant information.")

    send_recruitment_message(reply)