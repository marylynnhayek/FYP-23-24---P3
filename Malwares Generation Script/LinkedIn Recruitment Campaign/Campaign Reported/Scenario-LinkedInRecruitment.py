import os
import openai
from openai import OpenAI
from bs4 import BeautifulSoup
import requests
from urllib.request import Request, urlopen

# Place in .env file!!
client = OpenAI(
   api_key= "xxxxxxxx",
)

# Step #1: Scrape user info: In our case its the profile: name, skills and email if present
def collect_applicant_info():
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
 
    site = 'https://au.linkedin.com/in/marylynnelhayek'
 
    req = Request(site,headers=headers)
    page = urlopen(req)
 
    soup = BeautifulSoup(page, 'lxml')
    name = soup.find('h1', class_='top-card-layout__title font-sans text-lg papabear:text-xl font-bold leading-open text-color-text mb-0')
    # print(name)
    if name:
        name = name.text.strip()
        print("Name:", name)
    else:
        print("Name not found")
        return None, None
    # projects = soup.find_all('p', class_='show-more-less-text__text--less')
    l=[]
    projects = soup.find_all('p', class_='show-more-less-text__text--less')
    #for j in projects:
       # print(j.text)
 
    if projects:
        for j in projects:
            print("Projects:", j.text)
            l.append(j.text)
    else:
        print("Projects not found")
        return None, None
    projects=";".join(l)
    return name, projects

# Step #2: Pass the collected info to the LLM for message generation
def generate_recruitment_message(name, projects):
    prompt = f"Dear {name},\n\nSubject: Recruitment At Proxone\n\nI am reaching out to express my interest in your profile. Based on the projects listed on your LinkedIn page, such as:\n\n"
    prompt += "\n".join([f"- {project}" for project in projects])
    prompt += "\n\nI believe your skills and experience would be a great fit for our team. Let's discuss further how we can collaborate.\n\nSincerely,\n[Your Name]"
    prompt += "\n\nSincerely,\nProxone Recruitment Team"

    messages = [
        {"role": "system", "content": "You are a recruiter: "},
    ]

    message = f"Can you please generate a recruitment Email based on the following projects {projects} and can you please also dedicate it to {name} ? And please remove [Your Name] from the Email footer and replace [Your Title] by Proxone Recruitment Team and replace [Company Name] by Proxone!"
    # message = "Can you please generate a recruitment Email based on the following projects and can you please also dedicate it to"

    chat_completion = client.chat.completions.create(
        messages=[
        {
            "role": "user",
            "content": message ,
        }
        ],\
        model="gpt-3.5-turbo",
    )
        
    reply =  chat_completion.choices[0].message.content
    print(f"ChatGPT: {reply}")
    messages.append({"role": "assistant", "content": reply})

# From the info scraped, generate a report and save it locally:
def generate_report(name, projects):
    report_content = f"LinkedIn Profile Scraping Report for {name}\n\n"
    report_content += f"Name: {name}\n\n"
    report_content += "Projects:\n"
    for i, project in enumerate(projects, start=1):
        report_content += f"{i}. {project}\n"
    
    return report_content

def save_report_to_file(report_content, name):
    filename = f"{name}_linkedin_profile_report.txt"
    with open(filename, "w", encoding="utf-8") as file:
        file.write(report_content)
    print(f"Report saved to {filename}")


# Automated Linkedin message geenration to the user:




# Detection:
# Pass the collected information through the trained classifier using RAG to detect phishing attacks.
# Generate detection reports
# If the classifier determines that any of the messages are phishing attacks, take appropriate action, such as blocking the sender or alerting the user.

if __name__ == "__main__":

    # Step #1:
    name, projects = collect_applicant_info() # Scrape user linkedin profile

    if name and projects:
        email_content = generate_recruitment_message(name, projects)
        # print(f"Generated Email Content:Â {email_content}")
        report_content = generate_report(name, projects)
        save_report_to_file(report_content, name)

    else:
        print("Failed to collect applicant information.")
